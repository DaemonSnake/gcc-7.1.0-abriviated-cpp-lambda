From e77e5f8f32eddff57903bffc1cca1a0e26aced60 Mon Sep 17 00:00:00 2001
From: Bastien Penavayre <bastienPenava@gmail.com>
Date: Tue, 10 Oct 2017 14:15:50 +0200
Subject: [PATCH 2/3] abbreviated lambda (not omitted type)

This patch adds the following:
* adds the token_type CPP_EQ_GREATER :
        '=>' (libcpp/lex.c & libcpp/include/cpplib.h)
* implements the abbreviated syntax for lambdas and functions :
        int main() => 42; []() => 42; ...
* implements the return type specification for abbreviated lambda and functions :
        '[](auto&& x) -> decltype((x)) { return x; }' being equivalent to '[](auto&& x) => x'
        'auto func(auto&& x) -> decltype((x)) { return x; }' being equivalent to 'auto func(auto&&x) => x'
* implements the noexcept specification over abbreviated lambdas or functions :
        noexcept(noexcept(return_expr))
---
 gcc/cp/parser.c | 122 ++++++++++++++++++++++++++++++++++++++++++++++++++------
 1 file changed, 110 insertions(+), 12 deletions(-)

diff --git a/gcc/cp/parser.c b/gcc/cp/parser.c
index 9c912575a..c700926b3 100644
--- a/gcc/cp/parser.c
+++ b/gcc/cp/parser.c
@@ -260,6 +260,9 @@ static tree cp_parser_cilk_simd_vectorlength
 static void cp_finalize_oacc_routine
   (cp_parser *, tree, bool);
 
+static void cp_parser_try_abbreviated_function_block
+  (cp_parser *, tree &, tree &);
+
 /* Manifest constants.  */
 #define CP_LEXER_BUFFER_SIZE ((256 * 1024) / sizeof (cp_token))
 #define CP_SAVED_TOKEN_STACK 5
@@ -2557,7 +2560,7 @@ static cp_token *cp_parser_require
 static cp_token *cp_parser_require_keyword
   (cp_parser *, enum rid, required_token);
 static bool cp_parser_token_starts_function_definition_p
-  (cp_token *);
+  (cp_lexer *, cp_token * = NULL);
 static bool cp_parser_next_token_starts_class_definition_p
   (cp_parser *);
 static bool cp_parser_next_token_ends_template_argument_p
@@ -10163,6 +10166,39 @@ cp_parser_lambda_introducer (cp_parser* parser, tree lambda_expr)
   cp_parser_require (parser, CPP_CLOSE_SQUARE, RT_CLOSE_SQUARE);
 }
 
+static void
+cp_parser_try_abbreviated_function_block (cp_parser *parser, tree &return_spec, tree &exception_spec)
+{
+  tree expr;
+  cp_id_kind idk = CP_ID_KIND_NONE;
+
+  if ((parser->prevent_constrained_type_specifiers
+       || return_spec != NULL_TREE)
+      && exception_spec)
+    return ;
+  if (!cp_lexer_next_token_is (parser->lexer, CPP_EQ)
+      || !cp_lexer_nth_token_is (parser->lexer, 2, CPP_GREATER))
+    return ;
+
+  cp_lexer_save_tokens (parser->lexer);
+  cp_lexer_consume_token (parser->lexer);
+  cp_lexer_consume_token (parser->lexer);
+  ++cp_unevaluated_operand;
+  expr = cp_parser_assignment_expression (parser, &idk);
+  --cp_unevaluated_operand;
+  cp_lexer_rollback_tokens (parser->lexer);
+
+  if (!return_spec && !parser->prevent_constrained_type_specifiers)
+    return_spec = finish_decltype_type(expr,
+                                       /*id_expression_or_member_access_p*/false,
+                                       tf_warning_or_error);
+  if (!exception_spec)
+    {
+      tree noexcept_expr = finish_noexcept_expr (expr, tf_warning_or_error);
+      exception_spec = build_noexcept_spec (noexcept_expr, tf_warning_or_error);
+    }
+}
+
 /* Parse the (optional) middle of a lambda expression.
 
    lambda-declarator:
@@ -10265,12 +10301,19 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)
 	    = cp_parser_trailing_type_id (parser);
         }
 
+      cp_parser_try_abbreviated_function_block (parser,
+                                                LAMBDA_EXPR_RETURN_TYPE (lambda_expr),
+                                                exception_spec);
       /* The function parameters must be in scope all the way until after the
          trailing-return-type in case of decltype.  */
       pop_bindings_and_leave_scope ();
     }
   else if (template_param_list != NULL_TREE) // generate diagnostic
     cp_parser_require (parser, CPP_OPEN_PAREN, RT_OPEN_PAREN);
+  else /* might have [] => assigment_expression */
+    cp_parser_try_abbreviated_function_block (parser,
+                                              LAMBDA_EXPR_RETURN_TYPE (lambda_expr),
+                                              exception_spec);
 
   /* Create the function call operator.
 
@@ -10378,6 +10421,7 @@ cp_parser_lambda_body (cp_parser* parser, tree lambda_expr)
     tree fco = lambda_function (lambda_expr);
     tree body;
     bool done = false;
+    bool is_abbreviated_form = false;
     tree compound_stmt;
     tree cap;
 
@@ -10390,7 +10434,14 @@ cp_parser_lambda_body (cp_parser* parser, tree lambda_expr)
     start_lambda_scope (fco);
     body = begin_function_body ();
 
-    if (!cp_parser_require (parser, CPP_OPEN_BRACE, RT_OPEN_BRACE))
+    if (cp_lexer_next_token_is (parser->lexer, CPP_EQ)
+        && cp_lexer_nth_token_is (parser->lexer, 2, CPP_GREATER))
+      {
+        cp_lexer_consume_token (parser->lexer);
+        cp_lexer_consume_token (parser->lexer);
+        is_abbreviated_form = true;
+      }
+    else if (!cp_parser_require (parser, CPP_OPEN_BRACE, RT_OPEN_BRACE))
       goto out;
 
     /* Push the proxies for any explicit captures.  */
@@ -10449,6 +10500,13 @@ cp_parser_lambda_body (cp_parser* parser, tree lambda_expr)
 	    done = true;
 	  }
       }
+    else if (is_abbreviated_form)
+      {
+	cp_id_kind idk = CP_ID_KIND_NONE;        
+        tree expr = cp_parser_assignment_expression (parser, &idk);
+        finish_return_stmt (expr);
+        done = true;
+      }
 
     if (!done)
       {
@@ -19073,12 +19131,18 @@ cp_parser_init_declarator (cp_parser* parser,
 
   token = cp_lexer_peek_token (parser->lexer);
 
+  if (!type_uses_auto (decl_specifiers->type))
+    parser->prevent_constrained_type_specifiers = true;
+
   /* Parse the declarator.  */
   declarator
     = cp_parser_declarator (parser, CP_PARSER_DECLARATOR_NAMED,
 			    &ctor_dtor_or_conv_p,
 			    /*parenthesized_p=*/NULL,
 			    member_p, friend_p);
+
+  parser->prevent_constrained_type_specifiers = false;
+
   /* Gather up the deferred checks.  */
   stop_deferring_access_checks ();
 
@@ -19152,7 +19216,7 @@ cp_parser_init_declarator (cp_parser* parser,
 
       /* Check to see if the token indicates the start of a
 	 function-definition.  */
-      if (cp_parser_token_starts_function_definition_p (token))
+      if (cp_parser_token_starts_function_definition_p (parser->lexer, token))
 	{
 	  if (!function_definition_allowed_p)
 	    {
@@ -19734,6 +19798,10 @@ cp_parser_direct_declarator (cp_parser* parser,
 				 (parser, declarator, requires_clause,
 				  memfn ? cv_quals : -1));
 
+                  cp_parser_try_abbreviated_function_block (parser,
+                                                            late_return,
+                                                            exception_specification);
+
 		  /* Parse the virt-specifier-seq.  */
 		  virt_specifiers = cp_parser_virt_specifier_seq_opt (parser);
 
@@ -21461,9 +21529,23 @@ cp_parser_default_argument (cp_parser *parser, bool template_parm_p)
 static void
 cp_parser_function_body (cp_parser *parser, bool in_function_try_block)
 {
-  cp_parser_compound_statement (parser, NULL, (in_function_try_block
-					       ? BCS_TRY_BLOCK : BCS_NORMAL),
-				true);
+  if (!in_function_try_block
+      && cp_lexer_next_token_is (parser->lexer, CPP_EQ)
+      && cp_lexer_nth_token_is (parser->lexer, 2, CPP_GREATER))
+    {
+      cp_lexer_consume_token (parser->lexer);
+      cp_lexer_consume_token (parser->lexer);
+      tree compound_stmt = begin_compound_stmt (0);
+      cp_id_kind idk = CP_ID_KIND_NONE;
+      tree expr = cp_parser_assignment_expression (parser, &idk);
+      finish_return_stmt (expr);
+      finish_compound_stmt (compound_stmt);
+      cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);
+    }
+  else
+    cp_parser_compound_statement (parser, NULL, (in_function_try_block
+                                                 ? BCS_TRY_BLOCK : BCS_NORMAL),
+                                  true);
 }
 
 /* Parse a ctor-initializer-opt followed by a function-body.  Return
@@ -23336,7 +23418,8 @@ cp_parser_member_declaration (cp_parser* parser)
 		 its initializer is processed.  However, the rest of the
 		 front end does not yet provide an interface that allows
 		 us to handle this correctly.  */
-	      if (cp_lexer_next_token_is (parser->lexer, CPP_EQ))
+	      if (cp_lexer_next_token_is (parser->lexer, CPP_EQ)
+                  && !cp_lexer_nth_token_is (parser->lexer, 2, CPP_GREATER))
 		{
 		  /* In [class.mem]:
 
@@ -23395,7 +23478,7 @@ cp_parser_member_declaration (cp_parser* parser)
 		 side-effects, so we must not do it unless we are sure
 		 that we are looking at a member-declarator.  */
 	      if (cp_parser_token_starts_function_definition_p
-		  (cp_lexer_peek_token (parser->lexer)))
+		  (parser->lexer))
 		{
 		  /* The grammar does not allow a pure-specifier to be
 		     used when a member function is defined.  (It is
@@ -26904,7 +26987,7 @@ cp_parser_save_member_function_body (cp_parser* parser,
     {
       /* If there's a function-body, skip it.  */
       if (cp_parser_token_starts_function_definition_p
-	  (cp_lexer_peek_token (parser->lexer)))
+	  (parser->lexer))
 	cp_parser_skip_to_end_of_block_or_statement (parser);
       return error_mark_node;
     }
@@ -26967,7 +27050,18 @@ cp_parser_save_member_function_body (cp_parser* parser,
 	    cp_lexer_consume_token (parser->lexer);
 	}
     }
-  cp_parser_cache_group (parser, CPP_CLOSE_BRACE, /*depth=*/0);
+  if (!function_try_block
+      && cp_lexer_next_token_is (parser->lexer, CPP_EQ)
+      && cp_lexer_nth_token_is (parser->lexer, 2, CPP_GREATER))
+    {
+      cp_lexer_consume_token (parser->lexer);
+      cp_lexer_consume_token (parser->lexer);
+      while (cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON))
+        cp_lexer_consume_token (parser->lexer);
+      cp_lexer_consume_token (parser->lexer);
+    }
+  else
+    cp_parser_cache_group (parser, CPP_CLOSE_BRACE, /*depth=*/0);
   /* Handle function try blocks.  */
   if (function_try_block)
     while (cp_lexer_next_token_is_keyword (parser->lexer, RID_CATCH))
@@ -28053,8 +28147,10 @@ cp_parser_require_keyword (cp_parser* parser,
    function-definition.  */
 
 static bool
-cp_parser_token_starts_function_definition_p (cp_token* token)
+cp_parser_token_starts_function_definition_p (cp_lexer *lexer, cp_token* token)
 {
+  if (token == NULL)
+    token = cp_lexer_peek_token (lexer);
   return (/* An ordinary function-body begins with an `{'.  */
 	  token->type == CPP_OPEN_BRACE
 	  /* A ctor-initializer begins with a `:'.  */
@@ -28066,7 +28162,9 @@ cp_parser_token_starts_function_definition_p (cp_token* token)
 	  || token->keyword == RID_TRANSACTION_ATOMIC
 	  || token->keyword == RID_TRANSACTION_RELAXED
 	  /* The named return value extension begins with `return'.  */
-	  || token->keyword == RID_RETURN);
+	  || token->keyword == RID_RETURN
+         /* A single assignement-expression return body '=>' */
+          || (token->type == CPP_EQ && cp_lexer_nth_token_is (lexer, 2, CPP_GREATER)));
 }
 
 /* Returns TRUE iff the next token is the ":" or "{" beginning a class
-- 
2.11.0

