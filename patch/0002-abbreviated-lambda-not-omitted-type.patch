From c358217c0f9538e5381456ff0852aafd76131773 Mon Sep 17 00:00:00 2001
From: Bastien Penavayre <bastienPenava@gmail.com>
Date: Thu, 5 Oct 2017 07:21:11 +0200
Subject: [PATCH 2/3] abbreviated lambda (not omitted type)

This patch adds the following:
* adds the token_type CPP_EQ_GREATER :
        '=>' (libcpp/lex.c & libcpp/include/cpplib.h)
* implements the abbreviated syntax for lambdas and functions :
        int main() => 42; []() => 42; ...
* implements the return type specification for abbreviated lambda and functions :
        '[](auto&& x) -> decltype((x)) { return x; }' being equivalent to '[](auto&& x) => x'
        'auto func(auto&& x) -> decltype((x)) { return x; }' being equivalent to 'auto func(auto&&x) => x'

It doesn't yet:

* implements the noexcept specification over abbreviated lambdas or functions :
        noexcept(noexcept(return_expr))
---
 gcc/cp/parser.c | 142 ++++++++++++++++++++++++++++++++++++++++++--------------
 1 file changed, 107 insertions(+), 35 deletions(-)

diff --git a/gcc/cp/parser.c b/gcc/cp/parser.c
index 9c912575a..4016a4b47 100644
--- a/gcc/cp/parser.c
+++ b/gcc/cp/parser.c
@@ -2557,7 +2557,7 @@ static cp_token *cp_parser_require
 static cp_token *cp_parser_require_keyword
   (cp_parser *, enum rid, required_token);
 static bool cp_parser_token_starts_function_definition_p
-  (cp_token *);
+  (cp_lexer *, cp_token * = NULL);
 static bool cp_parser_next_token_starts_class_definition_p
   (cp_parser *);
 static bool cp_parser_next_token_ends_template_argument_p
@@ -10378,6 +10378,7 @@ cp_parser_lambda_body (cp_parser* parser, tree lambda_expr)
     tree fco = lambda_function (lambda_expr);
     tree body;
     bool done = false;
+    bool is_abbreviated_form = false;
     tree compound_stmt;
     tree cap;
 
@@ -10390,7 +10391,14 @@ cp_parser_lambda_body (cp_parser* parser, tree lambda_expr)
     start_lambda_scope (fco);
     body = begin_function_body ();
 
-    if (!cp_parser_require (parser, CPP_OPEN_BRACE, RT_OPEN_BRACE))
+    if (cp_lexer_next_token_is (parser->lexer, CPP_EQ)
+        && cp_lexer_nth_token_is (parser->lexer, 2, CPP_GREATER))
+      {
+        cp_lexer_consume_token (parser->lexer);
+        cp_lexer_consume_token (parser->lexer);
+        is_abbreviated_form = true;
+      }
+    else if (!cp_parser_require (parser, CPP_OPEN_BRACE, RT_OPEN_BRACE))
       goto out;
 
     /* Push the proxies for any explicit captures.  */
@@ -10415,39 +10423,65 @@ cp_parser_lambda_body (cp_parser* parser, tree lambda_expr)
        nor a deducible form, errors should be reported for return statements
        in the body.  Since we used void as the placeholder return type, parsing
        the body as usual will give such desired behavior.  */
-    if (!LAMBDA_EXPR_RETURN_TYPE (lambda_expr)
-        && cp_lexer_peek_nth_token (parser->lexer, 1)->keyword == RID_RETURN
-        && cp_lexer_peek_nth_token (parser->lexer, 2)->type != CPP_SEMICOLON)
+    if (is_abbreviated_form ||
+        (!LAMBDA_EXPR_RETURN_TYPE (lambda_expr)
+         && cp_lexer_peek_nth_token (parser->lexer, 1)->keyword == RID_RETURN
+         && cp_lexer_peek_nth_token (parser->lexer, 2)->type != CPP_SEMICOLON))
       {
 	tree expr = NULL_TREE;
 	cp_id_kind idk = CP_ID_KIND_NONE;
 
-	/* Parse tentatively in case there's more after the initial return
-	   statement.  */
-	cp_parser_parse_tentatively (parser);
-
-	cp_parser_require_keyword (parser, RID_RETURN, RT_RETURN);
-
-	expr = cp_parser_expression (parser, &idk);
+        if (!is_abbreviated_form)
+          {
+            /* Parse tentatively in case there's more after the initial return
+               statement.  */
+            cp_parser_parse_tentatively (parser);
 
-	cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);
-	cp_parser_require (parser, CPP_CLOSE_BRACE, RT_CLOSE_BRACE);
+            cp_parser_require_keyword (parser, RID_RETURN, RT_RETURN);
 
-	if (cp_parser_parse_definitely (parser))
-	  {
-	    if (!processing_template_decl)
-	      {
-		tree type = lambda_return_type (expr);
-		apply_deduced_return_type (fco, type);
-		if (type == error_mark_node)
-		  expr = error_mark_node;
-	      }
+            expr = cp_parser_expression (parser, &idk);
 
-	    /* Will get error here if type not deduced yet.  */
-	    finish_return_stmt (expr);
+            cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);
+            cp_parser_require (parser, CPP_CLOSE_BRACE, RT_CLOSE_BRACE);
 
-	    done = true;
-	  }
+            if (cp_parser_parse_definitely (parser))
+              {
+                if (!processing_template_decl)
+                  {
+                    tree type = lambda_return_type (expr);
+                    apply_deduced_return_type (fco, type);
+                    if (type == error_mark_node)
+                      expr = error_mark_node;
+                  }
+
+                /* Will get error here if type not deduced yet.  */
+                finish_return_stmt (expr);
+
+                done = true;
+              }
+          }
+        else
+         {
+           expr = cp_parser_assignment_expression (parser, &idk);
+           if (!LAMBDA_EXPR_RETURN_TYPE (lambda_expr))
+             {
+               tree type = finish_decltype_type
+                   (expr,
+                    /*id_expression_or_member_access_p*/false,
+                    tf_warning_or_error);
+               LAMBDA_EXPR_RETURN_TYPE (lambda_expr) = type;
+               apply_deduced_return_type (fco, type);
+               if (type == error_mark_node)
+                 expr = error_mark_node;
+             }
+           // how to change DEFERRED_NOEXCEPT_SPEC_P (fco) ?
+           // tree noexcept_expr = finish_noexcept_expr (expr, tf_warning_or_error);
+           // tree raises = build_noexcept_spec (noexcept_expr, tf_warning_or_error);
+           // TREE_TYPE (fco) = build_exception_variant (TREE_TYPE (fco), raises);
+           // TYPE_RAISES_EXCEPTIONS (TREE_TYPE (fco)) = raises;
+           finish_return_stmt (expr);
+           done = true;
+         }
       }
 
     if (!done)
@@ -19152,7 +19186,7 @@ cp_parser_init_declarator (cp_parser* parser,
 
       /* Check to see if the token indicates the start of a
 	 function-definition.  */
-      if (cp_parser_token_starts_function_definition_p (token))
+      if (cp_parser_token_starts_function_definition_p (parser->lexer, token))
 	{
 	  if (!function_definition_allowed_p)
 	    {
@@ -21461,9 +21495,43 @@ cp_parser_default_argument (cp_parser *parser, bool template_parm_p)
 static void
 cp_parser_function_body (cp_parser *parser, bool in_function_try_block)
 {
-  cp_parser_compound_statement (parser, NULL, (in_function_try_block
-					       ? BCS_TRY_BLOCK : BCS_NORMAL),
-				true);
+  if (!in_function_try_block
+      && cp_lexer_next_token_is (parser->lexer, CPP_EQ)
+      && cp_lexer_nth_token_is (parser->lexer, 2, CPP_GREATER))
+    {
+      cp_lexer_consume_token (parser->lexer);
+      cp_lexer_consume_token (parser->lexer);
+      tree compound_stmt = begin_compound_stmt (0);
+      cp_id_kind idk = CP_ID_KIND_NONE;
+      tree expr = cp_parser_assignment_expression (parser, &idk);
+      tree fco = current_function_decl;
+      tree fntype = TREE_TYPE (fco);
+      tree fn_ret = TREE_TYPE (fntype);
+      if (type_uses_auto (fn_ret)
+          && is_auto (fn_ret)
+          && !TYPE_HAS_LATE_RETURN_TYPE (fntype))
+        {
+          tree type = finish_decltype_type
+              (expr,
+               /*id_expression_or_member_access_p*/false,
+               tf_warning_or_error);
+          if (type != error_mark_node)
+            apply_deduced_return_type (fco, type);
+        }
+      if (false) //doesn't provide throw() or noexcept() spec
+        {
+          tree noexcept_expr = finish_noexcept_expr (expr, tf_warning_or_error);
+          tree raises = build_noexcept_spec (noexcept_expr, tf_warning_or_error);
+          TREE_TYPE (fco) = build_exception_variant (TREE_TYPE (fco), raises);
+          TYPE_RAISES_EXCEPTIONS (TREE_TYPE (fco)) = raises;
+        }
+      finish_return_stmt (expr);
+      finish_compound_stmt (compound_stmt);
+    }
+  else
+    cp_parser_compound_statement (parser, NULL, (in_function_try_block
+                                                 ? BCS_TRY_BLOCK : BCS_NORMAL),
+                                  true);
 }
 
 /* Parse a ctor-initializer-opt followed by a function-body.  Return
@@ -23395,7 +23463,7 @@ cp_parser_member_declaration (cp_parser* parser)
 		 side-effects, so we must not do it unless we are sure
 		 that we are looking at a member-declarator.  */
 	      if (cp_parser_token_starts_function_definition_p
-		  (cp_lexer_peek_token (parser->lexer)))
+		  (parser->lexer))
 		{
 		  /* The grammar does not allow a pure-specifier to be
 		     used when a member function is defined.  (It is
@@ -26904,7 +26972,7 @@ cp_parser_save_member_function_body (cp_parser* parser,
     {
       /* If there's a function-body, skip it.  */
       if (cp_parser_token_starts_function_definition_p
-	  (cp_lexer_peek_token (parser->lexer)))
+	  (parser->lexer))
 	cp_parser_skip_to_end_of_block_or_statement (parser);
       return error_mark_node;
     }
@@ -28053,8 +28121,10 @@ cp_parser_require_keyword (cp_parser* parser,
    function-definition.  */
 
 static bool
-cp_parser_token_starts_function_definition_p (cp_token* token)
+cp_parser_token_starts_function_definition_p (cp_lexer *lexer, cp_token* token)
 {
+  if (token == NULL)
+    token = cp_lexer_peek_token (lexer);
   return (/* An ordinary function-body begins with an `{'.  */
 	  token->type == CPP_OPEN_BRACE
 	  /* A ctor-initializer begins with a `:'.  */
@@ -28066,7 +28136,9 @@ cp_parser_token_starts_function_definition_p (cp_token* token)
 	  || token->keyword == RID_TRANSACTION_ATOMIC
 	  || token->keyword == RID_TRANSACTION_RELAXED
 	  /* The named return value extension begins with `return'.  */
-	  || token->keyword == RID_RETURN);
+	  || token->keyword == RID_RETURN
+         /* A single assignement-expression return body '=>' */
+          || (token->type == CPP_EQ && cp_lexer_nth_token_is (lexer, 2, CPP_GREATER)));
 }
 
 /* Returns TRUE iff the next token is the ":" or "{" beginning a class
-- 
2.11.0

