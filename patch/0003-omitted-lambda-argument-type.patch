From e3ffe2349ec6977f74526c72317eff82dae5571f Mon Sep 17 00:00:00 2001
From: Bastien Penavayre <bastienPenava@gmail.com>
Date: Tue, 10 Oct 2017 13:54:54 +0200
Subject: [PATCH 3/3] omitted lambda argument type

This patch implements optional parameter type for lambdas :
   '[](x) {}' being equivalent to '[](auto&& x) {}'
   '[](x...) {}' being equivalent to '[](auto&&... x) {}'
---
 gcc/cp/parser.c | 72 ++++++++++++++++++++++++++++++++++++++++++---------------
 gcc/cp/parser.h |  3 +++
 2 files changed, 57 insertions(+), 18 deletions(-)

diff --git a/gcc/cp/parser.c b/gcc/cp/parser.c
index 4db5b1f65..4711bb971 100644
--- a/gcc/cp/parser.c
+++ b/gcc/cp/parser.c
@@ -3808,6 +3808,8 @@ cp_parser_new (void)
   /* Allow constrained-type-specifiers. */
   parser->prevent_constrained_type_specifiers = 0;
 
+  parser->parsing_type_omitted_lambda_argument = false;
+
   return parser;
 }
 
@@ -16984,8 +16986,25 @@ cp_parser_simple_type_specifier (cp_parser* parser,
 		{
 		  type = error_mark_node;
 		  if (!cp_parser_simulate_error (parser))
-		    cp_parser_name_lookup_error (parser, name, tmpl,
-						 NLE_TYPE, token->location);
+                    {
+                      /* If we are really about to create an error check optional type for lambda parameters */
+                      if (token->type == CPP_NAME
+                          && !cp_lexer_next_token_is (parser->lexer, CPP_NAME)
+                          && !processing_template_parmlist
+                          && current_class_type
+                          && LAMBDA_TYPE_P (current_class_type)
+                          && !lambda_function (current_class_type))
+                        {
+                          type = synthesize_implicit_template_parm (parser, NULL_TREE);
+                          type = TREE_TYPE (type);
+                          /* reset the parameter name token into the stream */
+                          parser->lexer->next_token = token;
+                          parser->parsing_type_omitted_lambda_argument = true;
+                        }
+                      else
+                        cp_parser_name_lookup_error (parser, name, tmpl,
+                                                     NLE_TYPE, token->location);
+                    }
 		}
 	    }
 	  else
@@ -20214,28 +20233,36 @@ cp_parser_ptr_operator (cp_parser* parser,
   enum tree_code code = ERROR_MARK;
   cp_token *token;
   tree attrs = NULL_TREE;
+  bool implied_non_lvalue = parser->parsing_type_omitted_lambda_argument;
 
+  parser->parsing_type_omitted_lambda_argument = false;
   /* Assume that it's not a pointer-to-member.  */
   *type = NULL_TREE;
   /* And that there are no cv-qualifiers.  */
   *cv_quals = TYPE_UNQUALIFIED;
 
-  /* Peek at the next token.  */
-  token = cp_lexer_peek_token (parser->lexer);
+  if (!implied_non_lvalue)
+    {
+      /* Peek at the next token.  */
+      token = cp_lexer_peek_token (parser->lexer);
 
-  /* If it's a `*', `&' or `&&' we have a pointer or reference.  */
-  if (token->type == CPP_MULT)
-    code = INDIRECT_REF;
-  else if (token->type == CPP_AND)
-    code = ADDR_EXPR;
-  else if ((cxx_dialect != cxx98) &&
-	   token->type == CPP_AND_AND) /* C++0x only */
+      /* If it's a `*', `&' or `&&' we have a pointer or reference.  */
+      if (token->type == CPP_MULT)
+        code = INDIRECT_REF;
+      else if (token->type == CPP_AND)
+        code = ADDR_EXPR;
+      else if ((cxx_dialect != cxx98) &&
+               token->type == CPP_AND_AND) /* C++0x only */
+        code = NON_LVALUE_EXPR;
+    }
+  else
     code = NON_LVALUE_EXPR;
 
   if (code != ERROR_MARK)
     {
-      /* Consume the `*', `&' or `&&'.  */
-      cp_lexer_consume_token (parser->lexer);
+      if (!implied_non_lvalue)
+        /* Consume the `*', `&' or `&&'.  */
+        cp_lexer_consume_token (parser->lexer);
 
       /* A `*' can be followed by a cv-qualifier-seq, and so can a
 	 `&', if we are allowing GNU extensions.  (The only qualifier
@@ -21260,6 +21287,7 @@ cp_parser_parameter_declaration (cp_parser *parser,
   cp_token *token = NULL, *declarator_token_start = NULL;
   const char *saved_message;
   bool template_parameter_pack_p = false;
+  bool lambda_argument_without_type = false;
 
   /* In a template parameter, `>' is not an operator.
 
@@ -21281,6 +21309,9 @@ cp_parser_parameter_declaration (cp_parser *parser,
 				&decl_specifiers,
 				&declares_class_or_enum);
 
+  /* cp_parser_decl_specifier might have found a lambda argument with an ommited type. */
+  lambda_argument_without_type = parser->parsing_type_omitted_lambda_argument;
+
   /* Complain about missing 'typename' or other invalid type names.  */
   if (!decl_specifiers.any_type_specifiers_p
       && cp_parser_parse_and_diagnose_invalid_type_name (parser))
@@ -21356,6 +21387,10 @@ cp_parser_parameter_declaration (cp_parser *parser,
 	}
     }
 
+  /* cp_parser_ptr_operator might have already reset this to false but
+     just in case we force it to false as we no longer need it */
+  parser->parsing_type_omitted_lambda_argument = false;
+
   /* If the next token is an ellipsis, and we have not seen a declarator
      name, and if either the type of the declarator contains parameter
      packs but it is not a TYPE_PACK_EXPANSION or is null (this happens
@@ -21370,11 +21405,12 @@ cp_parser_parameter_declaration (cp_parser *parser,
       if (type && DECL_P (type))
         type = TREE_TYPE (type);
 
-      if (((type
-	    && TREE_CODE (type) != TYPE_PACK_EXPANSION
-	    && (template_parm_p || uses_parameter_packs (type)))
-	   || (!type && template_parm_p))
-	  && declarator_can_be_parameter_pack (declarator))
+      if (lambda_argument_without_type
+          || (((type
+                && TREE_CODE (type) != TYPE_PACK_EXPANSION
+                && (template_parm_p || uses_parameter_packs (type)))
+               || (!type && template_parm_p))
+              && declarator_can_be_parameter_pack (declarator)))
 	{
 	  /* Consume the `...'. */
 	  cp_lexer_consume_token (parser->lexer);
diff --git a/gcc/cp/parser.h b/gcc/cp/parser.h
index 0994e1e7f..59af886da 100644
--- a/gcc/cp/parser.h
+++ b/gcc/cp/parser.h
@@ -412,6 +412,9 @@ struct GTY(()) cp_parser {
      context e.g., because they could never be deduced.  */
   int prevent_constrained_type_specifiers;
 
+  /* Will only be true after parsing the missing type of a lambda
+     argument and set back to false as soon as possible. */
+  bool parsing_type_omitted_lambda_argument;
 };
 
 /* In parser.c  */
-- 
2.11.0

